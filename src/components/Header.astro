---
import { motion } from 'framer-motion';

const currentPath = Astro.url.pathname;

const navItems = [
  { href: '/', label: 'Home' },
  { href: '/leistungen', label: 'Leistungen' },
  { href: '/projekte', label: 'Projekte' },
  { href: '/profil', label: 'Profil' },
  { href: '/kontakt', label: 'Kontakt' },
];
---

<header class="fixed top-0 left-0 right-0 z-50 bg-white/95 backdrop-blur-md border-b border-secondary-200/50 shadow-lg">
  <nav class="container" aria-label="Hauptnavigation">
    <div class="flex items-center justify-between h-18 lg:h-22">
      <!-- Logo -->
      <a href="/" class="flex items-center space-x-4 group" aria-label="LMP Consulting - Startseite">
        <div class="relative">
          <div class="w-12 h-12 bg-gradient-to-br from-primary-500 to-primary-700 rounded-xl flex items-center justify-center group-hover:scale-110 transition-all duration-500 shadow-lg group-hover:shadow-xl">
            <span class="text-white font-bold text-xl">L</span>
          </div>
          <div class="absolute -top-1 -right-1 w-4 h-4 bg-accent rounded-full opacity-80 group-hover:scale-125 transition-transform duration-300"></div>
        </div>
        <div class="hidden sm:block">
          <div class="text-2xl font-bold bg-gradient-to-r from-secondary-900 to-secondary-700 bg-clip-text text-transparent group-hover:from-primary group-hover:to-primary-600 transition-all duration-300">
            LMP Consulting
          </div>
          <div class="text-sm text-secondary-500 font-medium tracking-wide">
            IT • PROJECT • CHANGE
          </div>
        </div>
      </a>

      <!-- Desktop Navigation -->
      <div class="hidden lg:flex items-center space-x-1">
        {navItems.map((item) => (
          <div class="relative group">
            <a
              href={item.href}
              class={`relative px-4 py-3 text-sm font-semibold transition-all duration-300 rounded-lg hover:bg-primary-50 ${
                currentPath === item.href 
                  ? 'text-primary bg-primary-50' 
                  : 'text-secondary-700 hover:text-primary'
              }`}
              aria-current={currentPath === item.href ? 'page' : undefined}
            >
              {item.label}
              {currentPath === item.href && (
                <div class="absolute bottom-0 left-1/2 transform -translate-x-1/2 w-6 h-1 bg-primary rounded-full"></div>
              )}
            </a>
          </div>
        ))}
      </div>

      <!-- CTA Button -->
      <div class="hidden lg:flex items-center space-x-4">
        <a href="tel:+41441234567" class="text-secondary-600 hover:text-primary transition-colors duration-300 flex items-center space-x-2">
          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z" />
          </svg>
          <span class="text-sm">+41 44 123 45 67</span>
        </a>
        <a href="/kontakt" class="btn-primary shadow-lg hover:shadow-xl transform hover:-translate-y-0.5 transition-all duration-300">
          <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z" />
          </svg>
          Beratung starten
        </a>
      </div>

      <!-- Mobile Menu Button -->
      <button
        id="mobile-menu-button"
        class="lg:hidden p-2 text-secondary-700 hover:text-primary transition-colors duration-300"
        aria-label="Menü öffnen"
        aria-expanded="false"
        aria-controls="mobile-menu"
      >
        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
        </svg>
      </button>
    </div>

    <!-- Mobile Menu -->
    <div
      id="mobile-menu"
      class="lg:hidden absolute top-full left-0 right-0 bg-white border-b border-secondary-200 shadow-soft transform -translate-y-full opacity-0 transition-all duration-300 pointer-events-none"
      aria-hidden="true"
    >
      <div class="container py-4 space-y-4">
        {navItems.map((item) => (
          <a
            href={item.href}
            class={`block py-2 text-base font-medium transition-colors duration-300 ${
              currentPath === item.href 
                ? 'text-primary' 
                : 'text-secondary-700 hover:text-primary'
            }`}
            aria-current={currentPath === item.href ? 'page' : undefined}
          >
            {item.label}
          </a>
        ))}
        <div class="pt-4 border-t border-secondary-200">
          <a href="/kontakt" class="btn-primary w-full justify-center">
            Kontakt aufnehmen
          </a>
        </div>
      </div>
    </div>
  </nav>
</header>

<script>
  // Mobile menu toggle
  const mobileMenuButton = document.getElementById('mobile-menu-button');
  const mobileMenu = document.getElementById('mobile-menu');
  
  if (mobileMenuButton && mobileMenu) {
    mobileMenuButton.addEventListener('click', () => {
      const isExpanded = mobileMenuButton.getAttribute('aria-expanded') === 'true';
      
      mobileMenuButton.setAttribute('aria-expanded', (!isExpanded).toString());
      mobileMenu.setAttribute('aria-hidden', isExpanded.toString());
      
      if (isExpanded) {
        mobileMenu.classList.add('-translate-y-full', 'opacity-0', 'pointer-events-none');
      } else {
        mobileMenu.classList.remove('-translate-y-full', 'opacity-0', 'pointer-events-none');
      }
    });
  }
  
  // Close mobile menu when clicking outside
  document.addEventListener('click', (e) => {
    if (mobileMenu && mobileMenuButton && 
        !mobileMenu.contains(e.target as Node) && 
        !mobileMenuButton.contains(e.target as Node)) {
      mobileMenuButton.setAttribute('aria-expanded', 'false');
      mobileMenu.setAttribute('aria-hidden', 'true');
      mobileMenu.classList.add('-translate-y-full', 'opacity-0', 'pointer-events-none');
    }
  });
</script>